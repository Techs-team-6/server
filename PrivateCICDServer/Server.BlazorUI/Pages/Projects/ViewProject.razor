@page "/Projects/{projectName}/"
@using Server.API.Client
@using Server.API.Client.Contracts
@inject ProjectClient ProjectClient
@inject NavigationManager NavigationManager

@{
    var response = ProjectClient.GetAsync(ProjectName).Result;
    if (response.StatusCode != 200)
        throw new Exception($"status code {response.StatusCode}");
        
    var project = response.Project;
    
    <OurForm>
        <OurInput IsReadonly="true" Label="Id" Value="@project.Id.ToString()"/>
        <OurInput IsReadonly="true" Label="Name" Value="@project.Name"/>
        <OurInput IsReadonly="true" Label="Repository" Value="@project.Repository"/>
        <OurInput IsReadonly="true" Label="BuildScript" Value="@project.BuildScript"/>
    </OurForm>
}
<h4>Builds</h4>
@foreach (var build in project.Builds)
{
    <style>
        .card {
            width: 18rem;
            margin: 1rem 0;
        }
        a {
            color: inherit;
            text-decoration: inherit;
        }
    </style>
    <div class="card">
        <div class="card-header">
            @build.Name
        </div>
        <OurForm>
            <OurInput IsReadonly="true" Label="Id" Value="@build.Id.ToString()"/>
            <OurInput IsReadonly="true" Label="Storage Id" Value="@build.StorageId.ToString()"/>
        </OurForm>
    </div>
}
<a href="/Projects/">
    <button class="btn btn-primary">Back to list</button>
</a>
<button class="btn btn-danger" @onclick="@(_ => _deleteDialog.Show(project))">Delete</button>

<DeleteDialog @ref="_deleteDialog" OnDelete="@OnDelete"/>

@code {
    DeleteDialog _deleteDialog;

    [Parameter]
    public string ProjectName { get; set; }

    private void OnDelete(Project project)
    {
        ProjectClient.DeleteAsync(project.Id).Wait();
        NavigationManager.NavigateTo("/Projects/");
    }

}