@page "/Projects/{projectName}/"
@using Server.API.Client
@using Server.API.Client.Contracts
@using Server.BlazorUI.Tools
@inject ProjectClient ProjectClient
@inject InstanceClient InstanceClient
@inject NavigationManager NavigationManager

@{
    Project project;
    try
    {
        project = ProjectClient.GetAsync(ProjectName).Result;
    }
    catch (Exception e)
    {
        Console.WriteLine(e.Message);
        throw;
    }
    <OurForm>
        <OurInput IsReadonly="true" Label="Id" Value="@project.Id.ToString()"/>
        <OurInput IsReadonly="true" Label="Name" Value="@project.Name"/>
        <OurInput IsReadonly="true" Label="Repository" Value="@project.Repository"/>
        <OurInput IsReadonly="true" Label="BuildScript" Value="@project.BuildScript"/>
    </OurForm>
    <a href="/Projects/">
        <button class="btn btn-primary">Back to list</button>
    </a>
    <button class="btn btn-danger" @onclick="@(_ => _deleteDialog.Show(project))">Delete</button>

    <DeleteDialog @ref="_deleteDialog" OnDelete="@OnDelete"/>
    
    <div>
        <h4>Builds</h4>
        <button class="btn btn-primary" @onclick="@(_ => ChangeBuildsListVisibility())">@ButtonTitle(_showBuildList)</button>
        <button class="btn btn-primary" @onclick="@(_ => _buildCreateDialog.Show(project))">New</button>
        <CreateBuildDialog @ref="_buildCreateDialog" OnBuildCreate="@OnBuildCreate"/>
        @if (_showBuildList)
        {
            @foreach (var build in project.Builds)
            {
                <style>
            .card {
                width: 18rem;
                margin: 1rem 0;
            }
            a {
                color: inherit;
                text-decoration: inherit;
            }
        </style>
                <div class="card">
                    <div class="card-header">
                        @build.Name
                    </div>
                    <OurForm>
                        <OurInput IsReadonly="true" Label="Id" Value="@build.Id.ToString()"/>
                        <OurInput IsReadonly="true" Label="Storage Id" Value="@build.StorageId.ToString()"/>
                    </OurForm>
                </div>
            }
        }
    </div>


    <h4>Instances</h4>
    <button class="btn btn-primary" @onclick="@(_ => ChangeInstanceListVisibility())">@ButtonTitle(_showInstanceList)</button>
    <button class="btn btn-primary" @onclick="@(_ => _instanceCreateDialog.Show(project.Id))">New</button>
    <CreateInstanceDialog @ref="_instanceCreateDialog" OnInstanceCreate="@OnInstanceCreate"/>
    @if (_showInstanceList)
    {
        @foreach (var instance in project.Instances)
        {
            <style>
        .card {
            width: 18rem;
            margin: 1rem 0;
        }
        a {
            color: inherit;
            text-decoration: inherit;
        }
            </style>
            <div class="card">
                <div class="card-header">
                    @instance.Id
                </div>
                <OurForm>
                    <OurInput IsReadonly="true" Label="State" Value="@instance.State.ToString()"/>
                    <OurInput IsReadonly="true" Label="Machine Id" Value="@instance.InstanceConfig.DedicatedMachine.Id.ToString()"/>
                </OurForm>
            </div>
        }
    }
}

@code {
    DeleteDialog _deleteDialog = null!;
    CreateBuildDialog _buildCreateDialog = null!;
    CreateInstanceDialog _instanceCreateDialog = null!;
    bool _showBuildList = false;
    bool _showInstanceList = false;
    
    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; } = null!;

    [Parameter] public string ProjectName { get; set; } = "";

    private void OnDelete(Project project)
    {
        try
        {
            ProjectClient.DeleteAsync(project.Id).Wait();
            NavigationManager.NavigateTo("Projects/");
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(ErrorParser.GetErrorMessage(e.Message));
        }
    }

    private void OnBuildCreate(Guid id, string name, Guid storageId)
    {
        try
        {
            var result = ProjectClient.AddBuildAsync(id, name, storageId).Result;
            NavigationManager.NavigateTo($"Projects/{ProjectName}");
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(ErrorParser.GetErrorMessage(e.Message));
        }
       
    }
    
    private void OnInstanceCreate(Guid projectId, string startingString, Guid buildId, Guid machineId)
    {
        try
        {
            var result = InstanceClient.RegisterInstanceAsync(projectId, InstanceState.NotPublished, startingString, buildId, machineId).Result;
            NavigationManager.NavigateTo($"Projects/{ProjectName}");
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(ErrorParser.GetErrorMessage(e.Message));
        }
        
    }

    private void ChangeBuildsListVisibility()
    {
        _showBuildList = !_showBuildList;
    }
    
    private void ChangeInstanceListVisibility()
    {
        _showInstanceList = !_showInstanceList;
    }

    private static string ButtonTitle(bool visible)
    {
        return visible ? "Hide" : "Show";
    }
}