@page "/projects/{projectName}/"
@using Server.API.Client
@using Server.API.Client.Contracts
@inject ProjectClient ProjectClient
@inject InstanceClient InstanceClient
@inject NavigationManager NavigationManager

@{
    var project = ProjectClient.GetAsync(ProjectName).Result;
}
<h3>@project.Name</h3>
<div class="container">
    <h4>Information</h4>
    <OurForm>
        <OurInput IsReadonly="true" Label="Id" Value="@project.Id.ToString()"/>
        <OurInput IsReadonly="true" Label="Name" Value="@project.Name"/>
        <OurInput IsReadonly="true" Label="Repository" Value="@project.Repository"/>
        <OurInput IsReadonly="true" Label="BuildScript" Value="@project.BuildScript"/>
    </OurForm>
</div>

<div class="container">
    <button class="btn btn-light" @onclick="@(_ => ToggleBuildsListVisibility())">
        Builds
    </button>
    @if (_showBuildList)
    {
        <BuildsList Collection="@project.Builds"/>
        <button class="btn btn-secondary" @onclick="@(_ => _buildCreateDialog.Show(project))">New</button>
    }
</div>
<div class="container">
    <button class="btn btn-light" @onclick="@(_ => ToggleInstanceListVisibility())">
        Instances
    </button>
    @if (_showInstanceList)
    {
        <InstancesList Collection="@project.Instances"/>
        <button class="btn btn-secondary" @onclick="@(_ => _instanceCreateDialog.Show(project.Id))">New</button>
    }
</div>

<a href="/projects/" class="btn btn-secondary" role="button" aria-pressed="true">Back to list</a>
<button class="btn btn-danger" @onclick="@(_ => _deleteDialog.Show(project))">Delete</button>

<DeleteDialog @ref="_deleteDialog" OnDelete="@OnDelete"/>
<CreateBuildDialog @ref="_buildCreateDialog" OnBuildCreate="@OnBuildCreate"/>
<CreateInstanceDialog @ref="_instanceCreateDialog" OnInstanceCreate="@OnInstanceCreate"/>

@code {
    DeleteDialog _deleteDialog = null!;
    CreateBuildDialog _buildCreateDialog = null!;
    CreateInstanceDialog _instanceCreateDialog = null!;
    bool _showBuildList = true;
    bool _showInstanceList = true;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; } = null!;

    [Parameter]
    public string ProjectName { get; set; } = "";

    private void OnDelete(Project project)
    {
        try
        {
            ProjectClient.DeleteAsync(project.Id).Wait();
            NavigationManager.NavigateTo("Projects/");
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(e.Message);
        }
    }

    private void OnBuildCreate(Guid id, string name, Guid storageId)
    {
        try
        {
            var result = ProjectClient.AddBuildAsync(id, name, storageId).Result;
            StateHasChanged();
        }
        catch (Exception e)
        {
            ErrorComponent.ShowError(e.Message);
        }
    }

    private void OnInstanceCreate(Guid projectId, string startingString, Guid buildId, Guid machineId)
    {
        var result = InstanceClient.RegisterInstanceAsync(projectId, new InstanceConfig
        {
            BuildId = buildId, DedicatedMachineId = machineId, StartString = startingString
        }).Result;
        StateHasChanged();
    }

    private void ToggleBuildsListVisibility()
    {
        _showBuildList = !_showBuildList;
    }

    private void ToggleInstanceListVisibility()
    {
        _showInstanceList = !_showInstanceList;
    }

}